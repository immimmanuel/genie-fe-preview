import { ClientOptions, OperationOptions, TokenCredential, KeyCredential } from '@typespec/ts-http-runtime';

type AIChatRole = "user" | "assistant" | "system";
interface AIChatMessage {
    role: AIChatRole;
    content: string;
    context?: object;
}
interface AIChatMessageDelta {
    role?: AIChatRole;
    content?: string;
    context?: object;
}
interface AIChatCompletion {
    message: AIChatMessage;
    sessionState?: unknown;
    context?: object;
}
interface AIChatCompletionDelta {
    delta: AIChatMessageDelta;
    sessionState?: unknown;
    context?: object;
}
interface AIChatCompletionOptions {
    context?: object;
    sessionState?: unknown;
}
type AIChatCompletionRequest = {
    messages: AIChatMessage[];
} & AIChatCompletionOptions;
interface AIChatClientOptions extends ClientOptions {
}
type AIChatCompletionOperationOptions = AIChatCompletionOptions & OperationOptions;
interface AIChatError {
    code: string;
    message: string;
}
interface AIChatErrorResponse {
    error: AIChatError;
}

declare class AIChatProtocolClient {
    private client;
    private basePath;
    constructor(endpoint: string, options?: AIChatClientOptions);
    constructor(endpoint: string, credential: TokenCredential | KeyCredential, options?: AIChatClientOptions);
    getCompletion(messages: AIChatMessage[], options?: AIChatCompletionOperationOptions): Promise<AIChatCompletion>;
    getStreamedCompletion(messages: AIChatMessage[], options?: AIChatCompletionOperationOptions): Promise<AsyncIterable<AIChatCompletionDelta>>;
}

export { type AIChatClientOptions, type AIChatCompletion, type AIChatCompletionDelta, type AIChatCompletionOperationOptions, type AIChatCompletionOptions, type AIChatCompletionRequest, type AIChatError, type AIChatErrorResponse, type AIChatMessage, type AIChatMessageDelta, AIChatProtocolClient, type AIChatRole };
//# sourceMappingURL=index.d.ts.map
