{"version":3,"mappings":"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","names":["Layout","jsxs","styles","jsx","Fragment","Outlet","RetrievalMode","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","index","citationIndex","renderToStaticMarkup","AnswerIcon","Sparkle28Filled","Answer","isSelected","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","followupQuestions","messageContent","useMemo","sanitizedAnswerHtml","DOMPurify","Stack","IconButton","rowId","ind","citation","x","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","error","onRetry","ErrorCircle24Regular","PrimaryButton","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","question","setQuestion","useState","useEffect","sendQuestion","onEnterPress","ev","addAttachment","onQuestionChange","_ev","newValue","Button","Attach28Filled","TextField","Tooltip","Send28Filled","Example","text","value","onClick","DEFAULT_EXAMPLES","ExampleList","onExampleClicked","UserChatMessage","message","AnalysisPanelTabs","SyntaxHighlighter","json","ThoughtProcess","thoughts","t","k","a11yLight","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","setCitation","fetchCitation","originalHash","citationContent","citationObjectUrl","Pivot","pivotItem","PivotItem","SettingsButton","Settings24Regular","ClearChatButton","Delete24Regular","VectorSettings","updateRetrievalMode","retrievalMode","setRetrievalMode","onRetrievalModeChange","option","Dropdown","Chat","isConfigPanelOpen","setIsConfigPanelOpen","promptTemplate","setPromptTemplate","temperature","setTemperature","retrieveCount","setRetrieveCount","useAdvancedFlow","setUseAdvancedFlow","shouldStream","setShouldStream","lastQuestionRef","useRef","chatMessageStreamEnd","isLoading","setIsLoading","setIsStreaming","setError","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","answers","setAnswers","streamedAnswers","setStreamedAnswers","dayStatus","setDayStatus","userNmae","setuserNmae","handleAsyncRequest","result","chatCompletion","updateState","newContent","resolve","latestCompletion","response","makeApiRequest","allMessages","options","chatClient","AIChatProtocolClient","parsedResponse","e","clearChat","onPromptTemplateChange","onTemperatureChange","range","event","onRetrieveCountChange","onUseAdvancedFlowChange","checked","onShouldStreamChange","example","onShowCitation","onToggleTab","tab","streamedAnswer","c","q","SparkleFilled","Panel","DefaultButton","Checkbox","SpinButton","Slider","layout","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","RouterProvider"],"sources":["../../src/pages/layout/Layout.tsx","../../src/api/models.ts","../../src/components/Answer/AnswerParser.tsx","../../src/components/Answer/AnswerIcon.tsx","../../src/components/Answer/Answer.tsx","../../src/components/Answer/AnswerLoading.tsx","../../src/components/Answer/AnswerError.tsx","../../src/components/QuestionInput/QuestionInput.tsx","../../src/components/Example/Example.tsx","../../src/components/Example/ExampleList.tsx","../../src/components/UserChatMessage/UserChatMessage.tsx","../../src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../src/components/AnalysisPanel/ThoughtProcess.tsx","../../src/components/AnalysisPanel/AnalysisPanel.tsx","../../src/components/SettingsButton/SettingsButton.tsx","../../src/components/ClearChatButton/ClearChatButton.tsx","../../src/components/VectorSettings/VectorSettings.tsx","../../src/pages/chat/Chat.tsx","../../src/index.tsx"],"sourcesContent":["import { Outlet, Link } from \"react-router-dom\";\n\nimport styles from \"./Layout.module.css\";\n\n\nconst Layout = () => {\n    return (\n        <div className={styles.layout}>\n            <header className={styles.header} role={\"banner\"}>\n                <div className={styles.headerContainer}>\n                    <></>\n                </div>\n            </header>\n\n            <Outlet />\n        </div>\n    );\n};\n\nexport default Layout;\n","import { AIChatCompletion, AIChatCompletionDelta, AIChatCompletionOperationOptions } from \"@microsoft/ai-chat-protocol\";\n\nexport const enum RetrievalMode {\n    Hybrid = \"hybrid\",\n    Vectors = \"vectors\",\n    Text = \"text\"\n}\n\nexport type ChatAppRequestOverrides = {\n    use_advanced_flow?: boolean;\n    retrieval_mode?: RetrievalMode;\n    top?: number;\n    temperature?: number;\n    prompt_template?: string;\n};\n\nexport type ChatAppRequestContext = {\n    overrides: ChatAppRequestOverrides;\n};\n\nexport interface ChatAppRequestOptions extends AIChatCompletionOperationOptions {\n    context: ChatAppRequestContext\n}\n\nexport type Thoughts = {\n    title: string;\n    description: any; // It can be any output from the api\n    props?: { [key: string]: string };\n};\n\nexport type RAGContext = {\n    data_points: { [key: string]: any };\n    followup_questions: string[] | null;\n    thoughts: Thoughts[];\n};\n\nexport interface RAGChatCompletion extends AIChatCompletion {\n    context: RAGContext;\n}\n\nexport interface RAGChatCompletionDelta extends AIChatCompletionDelta {\n    context: RAGContext;\n}\n","import { renderToStaticMarkup } from \"react-dom/server\";\n\ntype HtmlParsedAnswer = {\n    answerHtml: string;\n    citations: string[];\n};\n\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\n    const citations: string[] = [];\n\n    // trim any whitespace from the end of the answer after removing follow-up questions\n    let parsedAnswer = answer.trim();\n\n    // Omit a citation that is still being typed during streaming\n    if (isStreaming) {\n        let lastIndex = parsedAnswer.length;\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\n            if (parsedAnswer[i] === \"]\") {\n                break;\n            } else if (parsedAnswer[i] === \"[\") {\n                lastIndex = i;\n                break;\n            }\n        }\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\n        parsedAnswer = truncatedAnswer;\n    }\n\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\n\n    const fragments: string[] = parts.map((part, index) => {\n        if (index % 2 === 0) {\n            return part;\n        } else {\n            let citationIndex: number;\n            if (citations.indexOf(part) !== -1) {\n                citationIndex = citations.indexOf(part) + 1;\n            } else {\n                citations.push(part);\n                citationIndex = citations.length;\n            }\n\n            return renderToStaticMarkup(\n                <a className=\"supContainer\" title={part}>\n                    <sup>{citationIndex}</sup>\n                </a>\n            );\n        }\n    });\n\n    return {\n        answerHtml: fragments.join(\"\"),\n        citations\n    };\n}\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\n\nexport const AnswerIcon = () => {\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\n};\n","import { useMemo } from \"react\";\nimport { Stack, IconButton } from \"@fluentui/react\";\nimport DOMPurify from \"dompurify\";\n\nimport styles from \"./Answer.module.css\";\n\nimport { RAGChatCompletion } from \"../../api/models\";\nimport { parseAnswerToHtml } from \"./AnswerParser\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\ninterface Props {\n    answer: RAGChatCompletion;\n    isSelected?: boolean;\n    isStreaming: boolean;\n    onCitationClicked: (filePath: string) => void;\n    onThoughtProcessClicked: () => void;\n    onSupportingContentClicked: () => void;\n    onFollowupQuestionClicked?: (question: string) => void;\n    showFollowupQuestions?: boolean;\n}\n\nexport const Answer = ({\n    answer,\n    isSelected,\n    isStreaming,\n    onCitationClicked,\n    onThoughtProcessClicked,\n    onSupportingContentClicked,\n    onFollowupQuestionClicked,\n    showFollowupQuestions\n}: Props) => {\n    const followupQuestions = answer.context.followup_questions;\n    const messageContent = answer.message.content;\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked), [answer]);\n\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\n\n    return (\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\n            <Stack.Item>\n                <Stack horizontal horizontalAlign=\"space-between\">\n                    <AnswerIcon />\n                    <div>\n                        <IconButton\n                            style={{ color: \"black\" }}\n                            iconProps={{ iconName: \"Lightbulb\" }}\n                            title=\"Show thought process\"\n                            ariaLabel=\"Show thought process\"\n                            onClick={() => onThoughtProcessClicked()}\n                            disabled={!answer.context.thoughts?.length}\n                        />\n                    </div>\n                </Stack>\n            </Stack.Item>\n\n            <Stack.Item grow>\n                <div className={styles.answerText} dangerouslySetInnerHTML={{ __html: sanitizedAnswerHtml }}></div>\n            </Stack.Item>\n\n            {!!parsedAnswer.citations.length && (\n                <Stack.Item>\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\n                        <span className={styles.citationLearnMore}>References:</span>\n                        <ol>\n                        {parsedAnswer.citations.map((rowId, ind) => {\n                            const citation = answer.context.data_points[rowId];\n                            if (!citation) return null;\n                            return (\n                                <li key={rowId}>\n                                    <h4>{citation.name}</h4>\n                                    <p className={styles.referenceMetadata}>Brand: {citation.brand}</p>\n                                    <p className={styles.referenceMetadata}>Price: {citation.price}</p>\n                                    <p>{citation.description}</p>\n                                </li>\n                            );\n                        })}\n                        </ol>\n                    </Stack>\n                </Stack.Item>\n            )}\n\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\n                <Stack.Item>\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\n                        <span className={styles.followupQuestionLearnMore}>Follow-up questions:</span>\n                        {followupQuestions.map((x, i) => {\n                            return (\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\n                                    {`${x}`}\n                                </a>\n                            );\n                        })}\n                    </Stack>\n                </Stack.Item>\n            )}\n        </Stack>\n    );\n};\n","import { Stack } from \"@fluentui/react\";\nimport { animated, useSpring } from \"@react-spring/web\";\n\nimport styles from \"./Answer.module.css\";\nimport { AnswerIcon } from \"./AnswerIcon\";\n\nexport const AnswerLoading = () => {\n    const animatedStyles = useSpring({\n        from: { opacity: 0 },\n        to: { opacity: 1 }\n    });\n\n    return (\n        <animated.div style={{ ...animatedStyles }}>\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n                <AnswerIcon />\n                <Stack.Item grow>\n                    <p className={styles.answerText}>\n                        Generating answer\n                        <span className={styles.loadingdots} />\n                    </p>\n                </Stack.Item>\n            </Stack>\n        </animated.div>\n    );\n};\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\n\nimport styles from \"./Answer.module.css\";\n\ninterface Props {\n    error: string;\n    onRetry: () => void;\n}\n\nexport const AnswerError = ({ error, onRetry }: Props) => {\n    return (\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\n\n            <Stack.Item grow>\n                <p className={styles.answerText}>{error}</p>\n            </Stack.Item>\n\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\n        </Stack>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Stack, TextField } from \"@fluentui/react\";\nimport { Button, Tooltip } from \"@fluentui/react-components\";\nimport { Send28Filled, Attach28Filled } from \"@fluentui/react-icons\";\n\nimport styles from \"./QuestionInput.module.css\";\n\ninterface Props {\n    onSend: (question: string) => void;\n    disabled: boolean;\n    initQuestion?: string;\n    placeholder?: string;\n    clearOnSend?: boolean;\n}\n\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion }: Props) => {\n    const [question, setQuestion] = useState<string>(\"\");\n\n    useEffect(() => {\n        initQuestion && setQuestion(initQuestion);\n    }, [initQuestion]);\n\n    const sendQuestion = () => {\n        if (disabled || !question.trim()) {\n            return;\n        }\n\n        onSend(question);\n\n        if (clearOnSend) {\n            setQuestion(\"\");\n        }\n    };\n\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\n            ev.preventDefault();\n            sendQuestion();\n        }\n    };\n\n    const addAttachment = () => {\n        console.log(\"Add attachment\");\n    }\n\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        if (!newValue) {\n            setQuestion(\"\");\n        } else if (newValue.length <= 1000) {\n            setQuestion(newValue);\n        }\n    };\n\n    return (\n        <Stack horizontal className={styles.questionInputContainer}>\n            <Button size=\"large\" icon={<Attach28Filled primaryFill=\"rgb(137, 139, 173)\" />} onClick={sendQuestion} />\n            <TextField\n                className={styles.questionInputTextArea}\n                placeholder={placeholder}\n                multiline\n                resizable={false}\n                borderless\n                value={question}\n                onChange={onQuestionChange}\n                onKeyDown={onEnterPress}\n            />\n            <div className={styles.questionInputButtonsContainer}>\n                <Tooltip content=\"Ask question button\" relationship=\"label\">\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgb(228, 229, 238)\" />} onClick={addAttachment} />\n                </Tooltip>\n            </div>\n        </Stack>\n    );\n};\n","import styles from \"./Example.module.css\";\n\ninterface Props {\n    text: string;\n    value: string;\n    onClick: (value: string) => void;\n}\n\nexport const Example = ({ text, value, onClick }: Props) => {\n    return (\n        <div className={styles.example} onClick={() => onClick(value)}>\n            <p className={styles.exampleText}>{text}</p>\n        </div>\n    );\n};\n","import { Example } from \"./Example\";\n\nimport styles from \"./Example.module.css\";\n\nconst DEFAULT_EXAMPLES: string[] = [\n    \"Start Trading\",\n    \"learnig\",\n    \"help\", \n    \"career\", \n    \"help\", \n    \"market Update\", \n    \"Companies and asset\",\n    \"Emergency Center\",\n];\n\ninterface Props {\n    onExampleClicked: (value: string) => void\n}\n\nexport const ExampleList = ({ onExampleClicked }: Props) => {\n    return (\n        <ul className={styles.examplesNavList}>\n            {DEFAULT_EXAMPLES.map((question, i) => (\n                <li key={i}>\n                    <Example text={question} value={question} onClick={onExampleClicked} />\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import styles from \"./UserChatMessage.module.css\";\n\ninterface Props {\n    message: string;\n}\n\nexport const UserChatMessage = ({ message }: Props) => {\n    return (\n        <div className={styles.container}>\n            <div className={styles.message}>{message}</div>\n        </div>\n    );\n};\n","export enum AnalysisPanelTabs {\n    ThoughtProcessTab = \"thoughtProcess\",\n    SupportingContentTab = \"supportingContent\",\n    CitationTab = \"citation\"\n}\n","import { Stack } from \"@fluentui/react\";\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport json from \"react-syntax-highlighter/dist/esm/languages/hljs/json\";\nimport { a11yLight } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { Thoughts } from \"../../api\";\n\nSyntaxHighlighter.registerLanguage(\"json\", json);\n\ninterface Props {\n    thoughts: Thoughts[];\n}\n\nexport const ThoughtProcess = ({ thoughts }: Props) => {\n    return (\n        <ul className={styles.tList}>\n            {thoughts.map((t, ind) => {\n                return (\n                    <li className={styles.tListItem} key={ind}>\n                        <div className={styles.tStep}>{t.title}</div>\n                        <Stack horizontal tokens={{ childrenGap: 5 }}>\n                            {t.props &&\n                                (Object.keys(t.props) || []).map((k: any) => (\n                                    <span className={styles.tProp}>\n                                        {k}: {JSON.stringify(t.props?.[k])}\n                                    </span>\n                                ))}\n                        </Stack>\n                        {Array.isArray(t.description) ? (\n                            <SyntaxHighlighter language=\"json\" wrapLongLines className={styles.tCodeBlock} style={a11yLight}>\n                                {JSON.stringify(t.description, null, 2)}\n                            </SyntaxHighlighter>\n                        ) : (\n                            <div>{t.description}</div>\n                        )}\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\n\nimport styles from \"./AnalysisPanel.module.css\";\n\nimport { SupportingContent } from \"../SupportingContent\";\nimport { RAGChatCompletion } from \"../../api\";\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\nimport { ThoughtProcess } from \"./ThoughtProcess\";\nimport { MarkdownViewer } from \"../MarkdownViewer\";\nimport { useState, useEffect } from \"react\";\n\ninterface Props {\n    className: string;\n    activeTab: AnalysisPanelTabs;\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\n    activeCitation: string | undefined;\n    citationHeight: string;\n    answer: RAGChatCompletion;\n}\n\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\n\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\n    const isDisabledThoughtProcessTab: boolean = !answer.context.thoughts;\n    const isDisabledSupportingContentTab: boolean = !answer.context.data_points;\n    const isDisabledCitationTab: boolean = !activeCitation;\n    const [citation, setCitation] = useState(\"\");\n\n\n    const fetchCitation = async () => {\n        if (activeCitation) {\n            // Get hash from the URL as it may contain #page=N\n            // which helps browser PDF renderer jump to correct page N\n            const originalHash = activeCitation.indexOf(\"#\") ? activeCitation.split(\"#\")[1] : \"\";\n            const response = await fetch(activeCitation, {\n                method: \"GET\"\n            });\n            const citationContent = await response.blob();\n            let citationObjectUrl = URL.createObjectURL(citationContent);\n            // Add hash back to the new blob URL\n            if (originalHash) {\n                citationObjectUrl += \"#\" + originalHash;\n            }\n            setCitation(citationObjectUrl);\n        }\n    };\n    useEffect(() => {\n        fetchCitation();\n    }, []);\n\n    const renderFileViewer = () => {\n        if (!activeCitation) {\n            return null;\n        }\n\n        const fileExtension = activeCitation.split(\".\").pop()?.toLowerCase();\n        switch (fileExtension) {\n            case \"png\":\n                return <img src={citation} className={styles.citationImg} alt=\"Citation Image\" />;\n            case \"md\":\n                return <MarkdownViewer src={activeCitation} />;\n            default:\n                return <iframe title=\"Citation\" src={citation} width=\"100%\" height={citationHeight} />;\n        }\n    };\n\n    return (\n        <Pivot\n            className={className}\n            selectedKey={activeTab}\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\n        >\n            <PivotItem\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\n                headerText=\"Thought process\"\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\n            >\n                <ThoughtProcess thoughts={answer.context.thoughts || []} />\n            </PivotItem>\n        </Pivot>\n    );\n};\n","import { Settings24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./SettingsButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n}\n\nexport const SettingsButton = ({ className, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Settings24Regular />} onClick={onClick}>\n                {\"Developer settings\"}\n            </Button>\n        </div>\n    );\n};\n","import { Delete24Regular } from \"@fluentui/react-icons\";\nimport { Button } from \"@fluentui/react-components\";\n\nimport styles from \"./ClearChatButton.module.css\";\n\ninterface Props {\n    className?: string;\n    onClick: () => void;\n    disabled?: boolean;\n}\n\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\n    return (\n        <div className={`${styles.container} ${className ?? \"\"}`}>\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\n                {\"Clear chat\"}\n            </Button>\n        </div>\n    );\n};\n","import { useState } from \"react\";\nimport { Stack, IDropdownOption, Dropdown } from \"@fluentui/react\";\n\nimport styles from \"./VectorSettings.module.css\";\nimport { RetrievalMode } from \"../../api\";\n\ninterface Props {\n    updateRetrievalMode: (retrievalMode: RetrievalMode) => void;\n}\n\nexport const VectorSettings = ({ updateRetrievalMode }: Props) => {\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\n        updateRetrievalMode(option?.data || RetrievalMode.Hybrid);\n    };\n\n\n    return (\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\n            <Dropdown\n                label=\"Retrieval mode\"\n                options={[\n                    { key: \"hybrid\", text: \"Vectors + Text (Hybrid)\", selected: retrievalMode == RetrievalMode.Hybrid, data: RetrievalMode.Hybrid },\n                    { key: \"vectors\", text: \"Vectors\", selected: retrievalMode == RetrievalMode.Vectors, data: RetrievalMode.Vectors },\n                    { key: \"text\", text: \"Text\", selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\n                ]}\n                required\n                onChange={onRetrievalModeChange}\n            />\n\n        </Stack>\n    );\n};\n","import { useRef, useState, useEffect } from \"react\";\nimport { Panel, DefaultButton, TextField, SpinButton, Slider, Checkbox } from \"@fluentui/react\";\nimport { SparkleFilled } from \"@fluentui/react-icons\";\n\nimport styles from \"./Chat.module.css\";\n\nimport { RetrievalMode, RAGChatCompletion, RAGChatCompletionDelta, ChatAppRequestOptions } from \"../../api\";\nimport { AIChatProtocolClient, AIChatMessage } from \"@microsoft/ai-chat-protocol\";\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\nimport { QuestionInput } from \"../../components/QuestionInput\";\nimport { ExampleList } from \"../../components/Example\";\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\nimport { SettingsButton } from \"../../components/SettingsButton\";\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\nimport { VectorSettings } from \"../../components/VectorSettings\";\n\nconst Chat = () => {\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\n    const [temperature, setTemperature] = useState<number>(0.3);\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\n    const [useAdvancedFlow, setUseAdvancedFlow] = useState<boolean>(true);\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\n\n    const lastQuestionRef = useRef<string>(\"\");\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\n    const [error, setError] = useState<unknown>();\n\n    const [activeCitation, setActiveCitation] = useState<string>();\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\n\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\n    const [answers, setAnswers] = useState<[user: string, response: RAGChatCompletion][]>([]);\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: RAGChatCompletion][]>([]);\n\n    // mock for Ai Help\n    const [dayStatus, setDayStatus] = useState<string>('morning');\n    const [userNmae, setuserNmae] = useState<string>('emmanuel');\n\n    const handleAsyncRequest = async (question: string, answers: [string, RAGChatCompletion][], result: AsyncIterable<RAGChatCompletionDelta>) => {\n        let answer = \"\";\n        let chatCompletion: RAGChatCompletion = {\n            context: {\n                data_points: {},\n                followup_questions: null,\n                thoughts: []\n            },\n            message: { content: \"\", role: \"assistant\" }\n        };\n        const updateState = (newContent: string) => {\n            return new Promise(resolve => {\n                setTimeout(() => {\n                    answer += newContent;\n                    // We need to create a new object to trigger a re-render\n                    const latestCompletion: RAGChatCompletion = {\n                        ...chatCompletion,\n                        message: { content: answer, role: chatCompletion.message.role }\n                    };\n                    setStreamedAnswers([...answers, [question, latestCompletion]]);\n                    resolve(null);\n                }, 33);\n            });\n        };\n        try {\n            setIsStreaming(true);\n            for await (const response of result) {\n                if (response.context) {\n                    chatCompletion.context = {\n                        ...chatCompletion.context,\n                        ...response.context\n                    };\n                }\n                if (response.delta && response.delta.role) {\n                    chatCompletion.message.role = response.delta.role;\n                }\n                if (response.delta && response.delta.content) {\n                    setIsLoading(false);\n                    await updateState(response.delta.content);\n                }\n            }\n        } finally {\n            setIsStreaming(false);\n        }\n        chatCompletion.message.content = answer;\n        return chatCompletion;\n    };\n    const makeApiRequest = async (question: string) => {\n        lastQuestionRef.current = question;\n\n        error && setError(undefined);\n        setIsLoading(true);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n\n        try {\n            const messages: AIChatMessage[] = answers.flatMap(answer => [\n                { content: answer[0], role: \"user\" },\n                { content: answer[1].message.content, role: \"assistant\" }\n            ]);\n            const allMessages: AIChatMessage[] = [...messages, { content: question, role: \"user\" }];\n            const options: ChatAppRequestOptions = {\n                context: {\n                    overrides: {\n                        use_advanced_flow: useAdvancedFlow,\n                        top: retrieveCount,\n                        retrieval_mode: retrievalMode,\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\n                        temperature: temperature\n                    }\n                },\n                sessionState: answers.length ? answers[answers.length - 1][1].sessionState : null\n            };\n            const chatClient: AIChatProtocolClient = new AIChatProtocolClient(\"/chat\");\n            if (shouldStream) {\n                const result = (await chatClient.getStreamedCompletion(allMessages, options)) as AsyncIterable<RAGChatCompletionDelta>;\n                const parsedResponse = await handleAsyncRequest(question, answers, result);\n                setAnswers([...answers, [question, parsedResponse]]);\n            } else {\n                const result = (await chatClient.getCompletion(allMessages, options)) as RAGChatCompletion;\n                setAnswers([...answers, [question, result]]);\n            }\n        } catch (e) {\n            setError(e);\n        } finally {\n            setIsLoading(false);\n        }\n    };\n\n    const clearChat = () => {\n        lastQuestionRef.current = \"\";\n        error && setError(undefined);\n        setActiveCitation(undefined);\n        setActiveAnalysisPanelTab(undefined);\n        setAnswers([]);\n        setStreamedAnswers([]);\n        setIsLoading(false);\n        setIsStreaming(false);\n    };\n\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\n\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\n        setPromptTemplate(newValue || \"\");\n    };\n\n    const onTemperatureChange = (\n        newValue: number,\n        range?: [number, number],\n        event?: React.MouseEvent | React.TouchEvent | MouseEvent | TouchEvent | React.KeyboardEvent\n    ) => {\n        setTemperature(newValue);\n    };\n\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\n        setRetrieveCount(parseInt(newValue || \"3\"));\n    };\n\n    const onUseAdvancedFlowChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setUseAdvancedFlow(!!checked);\n    };\n\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\n        setShouldStream(!!checked);\n    };\n\n    const onExampleClicked = (example: string) => {\n        makeApiRequest(example);\n    };\n\n    const onShowCitation = (citation: string, index: number) => {\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveCitation(citation);\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\n            setActiveAnalysisPanelTab(undefined);\n        } else {\n            setActiveAnalysisPanelTab(tab);\n        }\n\n        setSelectedAnswer(index);\n    };\n\n    return (\n        <div className={styles.container}>\n            <div className={styles.commandsContainer}>\n                <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\n                <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\n            </div>\n            <div className={styles.chatRoot}>\n                <div className={styles.chatContainer}>\n                    {!lastQuestionRef.current ? (\n                        <div className={styles.chatEmptyState}>\n                            <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Chat logo\" />\n                            <h1 className={styles.chatEmptyStateTitle}>  Good {dayStatus.charAt(0).toUpperCase() + dayStatus.slice(1)} {userNmae} </h1>\n                            {/* s<h2 className={styles.chatEmptyStateSubtitle}>Ask anything on</h2> */}\n                            <ExampleList onExampleClicked={onExampleClicked} />\n                        </div>\n                    ) : (\n                        <div className={styles.chatMessageStream}>\n                            {isStreaming &&\n                                streamedAnswers.map((streamedAnswer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={streamedAnswer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={true}\n                                                key={index}\n                                                answer={streamedAnswer[1]}\n                                                isSelected={false}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {!isStreaming &&\n                                answers.map((answer, index) => (\n                                    <div key={index}>\n                                        <UserChatMessage message={answer[0]} />\n                                        <div className={styles.chatMessageGpt}>\n                                            <Answer\n                                                isStreaming={false}\n                                                key={index}\n                                                answer={answer[1]}\n                                                isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\n                                                onCitationClicked={c => onShowCitation(c, index)}\n                                                onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\n                                                onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\n                                                onFollowupQuestionClicked={q => makeApiRequest(q)}\n                                            />\n                                        </div>\n                                    </div>\n                                ))}\n                            {isLoading && (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerLoading />\n                                    </div>\n                                </>\n                            )}\n                            {error ? (\n                                <>\n                                    <UserChatMessage message={lastQuestionRef.current} />\n                                    <div className={styles.chatMessageGptMinWidth}>\n                                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\n                                    </div>\n                                </>\n                            ) : null}\n                            <div ref={chatMessageStreamEnd} />\n                        </div>\n                    )}\n\n                    <div className={styles.chatInput}>\n                        <QuestionInput\n                            clearOnSend\n                            placeholder=\"ask me any question (e.g. how do i start trading with GENiE?\"\n                            disabled={isLoading}\n                            onSend={question => makeApiRequest(question)}\n                        />\n                    </div>\n                </div>\n\n                {answers.length > 0 && activeAnalysisPanelTab && (\n                    <AnalysisPanel\n                        className={styles.chatAnalysisPanel}\n                        activeCitation={activeCitation}\n                        onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\n                        citationHeight=\"810px\"\n                        answer={answers[selectedAnswer][1]}\n                        activeTab={activeAnalysisPanelTab}\n                    />\n                )}\n\n                <Panel\n                    headerText=\"Configure answer generation\"\n                    isOpen={isConfigPanelOpen}\n                    isBlocking={false}\n                    onDismiss={() => setIsConfigPanelOpen(false)}\n                    closeButtonAriaLabel=\"Close\"\n                    onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>Close</DefaultButton>}\n                    isFooterAtBottom={true}\n                >\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={useAdvancedFlow}\n                        label=\"Use advanced flow with query rewriting and filter formulation. Not compatible with Ollama models.\"\n                        onChange={onUseAdvancedFlowChange}\n                    />\n\n                    <h3>Settings for database search:</h3>\n\n                    <SpinButton\n                        className={styles.chatSettingsSeparator}\n                        label=\"Retrieve this many matching rows:\"\n                        min={1}\n                        max={50}\n                        defaultValue={retrieveCount.toString()}\n                        onChange={onRetrieveCountChange}\n                    />\n\n                    <VectorSettings updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)} />\n\n                    <h3>Settings for final chat completion:</h3>\n\n                    <TextField\n                        className={styles.chatSettingsSeparator}\n                        defaultValue={promptTemplate}\n                        label=\"Override prompt template\"\n                        multiline\n                        autoAdjustHeight\n                        onChange={onPromptTemplateChange}\n                    />\n\n                    <Slider\n                        className={styles.chatSettingsSeparator}\n                        label=\"Temperature\"\n                        min={0}\n                        max={1}\n                        step={0.1}\n                        defaultValue={temperature}\n                        onChange={onTemperatureChange}\n                        showValue\n                        snapToStep\n                    />\n\n                    <Checkbox\n                        className={styles.chatSettingsSeparator}\n                        checked={shouldStream}\n                        label=\"Stream chat completion responses\"\n                        onChange={onShouldStreamChange}\n                    />\n                </Panel>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\nimport { initializeIcons } from \"@fluentui/react\";\n\nimport \"./index.css\";\n\nimport Layout from \"./pages/layout/Layout\";\nimport Chat from \"./pages/chat/Chat\";\n\nvar layout = <Layout />;\n\ninitializeIcons();\n\nconst router = createHashRouter([\n    {\n        path: \"/\",\n        element: layout,\n        children: [\n            {\n                index: true,\n                element: <Chat />\n            },\n            {\n                path: \"*\",\n                lazy: () => import(\"./pages/NoPage\")\n            }\n        ]\n    }\n]);\n\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\n    <React.StrictMode>\n        <RouterProvider router={router} />\n    </React.StrictMode>\n);\n"],"file":"assets/index-0ccb9fa1.js"}